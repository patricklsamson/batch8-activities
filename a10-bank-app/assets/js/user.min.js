class User extends Admin{constructor(username,password,email,signedUp,firstName,middleName,lastName,gender,accountNumber,accountType,balance){super(username,password),this.email=email,this.firstName=firstName,this.middleName=middleName,this.lastName=lastName,this.gender=gender,this.accountNumber=accountNumber,this.accountType=accountType,this.balance=balance,this.budget=balance,this.signedUp=signedUp,this.transactionHistory=[],this.userTransactionHistory=[],this.expenseItems=[],this.connections=[]}static userStorage(){let users;return users=null===localStorage.getItem("users")?[]:JSON.parse(localStorage.getItem("users")),users}static addUser(userAccount){const users=User.userStorage();users.push(userAccount),localStorage.setItem("users",JSON.stringify(users))}static get_budget(owner){const users=User.userStorage();let ownerCheck=users.findIndex(index=>index.accountNumber==owner);null!=users[ownerCheck]&&(id("owner-balance").innerHTML="",id("owner-balance").innerHTML=num_commas(users[ownerCheck].budget),users[ownerCheck].budget<0?add_class(id("budget"),"negative"):remove_class(id("budget"),"negative"))}static get_balance(user,parentEl){const users=User.userStorage();let userCheck=users.findIndex(index=>index.accountNumber==user),balanceTd=create_el("td");users[userCheck]&&(balanceTd.innerHTML=`â‚±${num_commas(users[userCheck].balance)}`,parentEl.appendChild(balanceTd))}static total_expenses(owner){const users=User.userStorage();let ownerCheck=users.findIndex(index=>index.accountNumber==owner),total=0;if(null!=users[ownerCheck]){for(id("owner-expenses").innerHTML="",i=0;i<users[ownerCheck].expenseItems.length;i++)total=parseFloat(total+parseFloat(users[ownerCheck].expenseItems[i].cost));id("owner-expenses").innerHTML=num_commas(total.toFixed(2))}}}