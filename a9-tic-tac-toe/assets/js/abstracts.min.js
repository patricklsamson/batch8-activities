let circle,endGame=!1,board=[["","",""],["","",""],["","",""]],i,historyObj={history:[],historyCounter:0,historyStorage:[],prevHistory:function(){let moveNum,moveMark;for(this.historyStorage.push(...this.history.splice(this.history.length-1,1)),i=0;i<this.historyStorage.length;i++)add_class(id("history-wrap").querySelectorAll(this.historyStorage[i].inner)[this.history.length],this.historyStorage[i].delete),remove_class(qsel(`[data-row="${this.historyStorage[i].rowPos}"][data-col="${this.historyStorage[i].colPos}"]`),this.historyStorage[i].marker);for(i=0;i<this.historyStorage.length;i++)moveNum=this.historyCounter-this.historyStorage.indexOf(this.historyStorage[i]);for(i=0;i<this.historyStorage.length;i++)moveMark=this.historyStorage[i].marker;has_class(id("prev-btn"),"show")&&(console.log(`Move ${moveNum} with mark ${moveMark.toUpperCase()} was undone.`),console.log(...this.historyStorage),console.log(...this.history)),this.historyStorage.length<this.history.length&&add_class(id("next-btn"),"show"),0==this.history.length&&remove_class(id("prev-btn"),"show")},nextHistory:function(){let moveNum,moveMark;for(this.history.push(...this.historyStorage.splice(this.historyStorage.length-1,1)),i=0;i<this.history.length;i++)remove_class(id("history-wrap").querySelectorAll(this.history[i].inner)[this.history.indexOf(this.history[i])],this.history[i].delete),add_class(qsel(`[data-row="${this.history[i].rowPos}"][data-col="${this.history[i].colPos}"]`),this.history[i].marker);for(i=0;i<this.history.length;i++)moveNum=this.history.indexOf(this.history[i])+1;for(i=0;i<this.history.length;i++)moveMark=this.history[i].marker;has_class(id("next-btn"),"show")&&(console.log(`Move ${moveNum} with mark ${moveMark.toUpperCase()} was redone.`),console.log(...this.history),console.log(...this.historyStorage)),this.history.length<this.historyStorage.length&&add_class(id("prev-btn"),"show"),0==this.historyStorage.length&&remove_class(id("next-btn"),"show")}};const circleTurn=()=>{add_class(id("tboard"),"o"),remove_class(id("tboard"),"x"),id("tooltip").innerHTML="Player O's turn."},crossTurn=()=>{add_class(id("tboard"),"x"),remove_class(id("tboard"),"o"),id("tooltip").innerHTML="Player X's turn."},startGame=()=>{circle=!1,id("player").innerHTML="X",circle?circleTurn():crossTurn()},markChecker=()=>{id("mark-checker").checked?(circle=!0,id("player").innerHTML="O",id("mark-holder-wrap").querySelectorAll("p")[0].id="o",id("mark-holder-wrap").querySelectorAll("p")[1].id="x",id("mark-holder1").innerHTML="O",id("mark-holder2").innerHTML="X",circleTurn()):(circle=!1,id("player").innerHTML="X",crossTurn())},gameEnd=()=>{for(endGame=!0,remove_class(id("tboard"),"x"),remove_class(id("tboard"),"o"),add_class(id("prev-btn"),"show"),i=0;i<qsel_all(".box").length;i++)remove_class(qsel_all(".box")[i],"empty")},handler=e=>{if(!endGame){const box=e.target||e.srcElement,mark=circle?"o":"x",row=box.dataset.row||box.getAttribute("data-row"),col=box.dataset.col||box.getAttribute("data-col");board[row][col]=mark,add_class(box,mark),remove_class(box,"empty"),(circle=!circle)?circleTurn():crossTurn(),historyObj.history[historyObj.historyCounter]={marker:mark,rowPos:row,colPos:col,inner:"p",delete:"strike"},historyObj.historyCounter++;const position=()=>{let text;switch(row+col){case"00":text="top leftmost";break;case"01":text="top middle";break;case"02":text="top rightmost";break;case"10":text="middle leftmost";break;case"11":text="middle";break;case"12":text="middle rightmost";break;case"20":text="bottom leftmost";break;case"21":text="bottom middle";break;case"22":text="bottom rightmost"}return text};console.log(`Move ${historyObj.historyCounter}: Player ${historyObj.history[historyObj.historyCounter-1].marker.toUpperCase()} puts their mark on the ${position()} box.`);const element=create_el("p");id("history-wrap").appendChild(element),element.innerHTML=`${historyObj.historyCounter} = ${mark.toUpperCase()} => ${position()}`;const scorer=el=>{setTimeout(()=>{let element=create_el("span");for(element.innerHTML="l",id(el).appendChild(element),i=4;i<id(el).querySelectorAll("span").length;i+=5)add_class(id(el).querySelectorAll("span")[i-1],"five"),add_class(id(el).querySelectorAll("span")[i-1],"img"),add_class(id(el).querySelectorAll("span")[i-1],"con"),id(el).querySelectorAll("span")[i].innerHTML=" - "},250)},winMessage=()=>{9==historyObj.history.length?(id("tooltip").innerHTML="It's a draw!",console.log("The players ended in a draw."),scorer("draw")):(id("tooltip").innerHTML=`Player ${mark.toUpperCase()} wins!`,console.log(`Player ${mark.toUpperCase()} is the winner!`),scorer(mark))};for(let row=0;row<board.length;row++){let a=board[row][0],b=board[row][1],c=board[row][2];if(a&&a===b&&b===c)return gameEnd(),void winMessage()}for(let col=0;col<board.length;col++){let a=board[0][col],b=board[1][col],c=board[2][col];if(a&&a===b&&b===c)return gameEnd(),void winMessage()}let a=board[0][0],b=board[2][2],c=board[0][2],d=board[2][0],f=board[1][1];(a&&a===b&&b===f||c&&c===d&&d==f)&&(gameEnd(),winMessage()),9==historyObj.history.length&&(gameEnd(),winMessage())}remove_event(e.target||e.srcElement,"click",handler)},reset=()=>{endGame=!1,board=[["","",""],["","",""],["","",""]],historyObj.history=[],historyObj.historyCounter=0,historyObj.historyStorage=[],startGame(),markChecker(),console.clear(),id("history-wrap").innerHTML="",qsel_all(".box").forEach(box=>{add_event(box,"click",handler),add_class(box,"empty"),remove_class(box,"x"),remove_class(box,"o")}),remove_class(id("prev-btn"),"show"),remove_class(id("next-btn"),"show")};